program : funcs main; Program; [0, 1]
funcs : ; Function; []
funcs : FUNCTION func_template funcs; Function; [0, 1, 2]
main : ; Function; []
main : MAIN func_template; Function; [0, 1]
func_template : type symbol params OPEN body result CLOSE; FuncTemplate; [0, 1, 2, 4, 5]
params : OPEN type symbol func_params CLOSE; Params; [1, 2, 3]
params : OPEN CLOSE; Params; []
params : COLON; Params; []
func_params : COMMA type symbol func_params; Params; [1, 2, 3]
func_params : ; Params; []
type : NULL_TYPE | BOOL_TYPE | INT_TYPE | FLOAT_TYPE | STR_TYPE | CIRCUIT_TYPE | HASHMAP_TYPE | MEASUREMENT_TYPE | symbol; AThing; [0]
symbol : SYMBOL | QSYMBOL; AThing; [0]
body : attr_decl body; Body; [0, 1]
body : attr_assign body; Body; [0, 1]
body : generic_call body; Body; [0, 1]
body : if_stmt body; Body; [0, 1]
body : for_loop body; Body; [0, 1]
body : ; Body; []
attr_decl : type symbol; AttrDecl; [0, 1]
attr_decl : type OPEN expr CLOSE symbol; AttrDecl; [0, 4, 2]
attr_decl : type OPEN expr CLOSE symbol ASSIGN attr_decl_assign; AttrDecl; [0, 4, 2, 6]
attr_decl : type symbol ASSIGN attr_decl_assign; AttrDecl; [0, 1, None, 3]
expr : INT_LITERAL; Expr; [0]
expr : STR_LITERAL; Expr; [0]
expr : FLOAT_LITERAL; Expr; [0]
expr : TRUE_LITERAL; Expr; [0]
expr : FALSE_LITERAL; Expr; [0]
expr : attr_call; Expr; [0]
expr : generic_call; Expr; [0]
expr : expr RANGE_LOOP expr; Expr; [0, 2]
expr : inline_func; Expr; [0]
attr_decl_assign : OPEN entity more_entity CLOSE; ManyExprs; [1, 2]
more_entity : COMMA entity more_entity; ManyExprs; [1, 2]
more_entity : ; ManyExprs; []
entity : expr COLON expr; Entity; [0, 2]
entity : COLON expr; Entity; [1]
attr_assign : symbol attr_decl_assign; AttrAssign; [0, 1]
generic_call : func OPEN more_expr CLOSE; Call; [0, 2]
attr_call : symbol OPEN more_expr CLOSE; Call; [0, 2]
attr_call : symbol; Call; [0]
attr_call : q_keyword; Call; [0]
attr_call : q_keyword OPEN more_expr CLOSE; Call; [0, 2]
func : symbol; Func; [0]
func : reserved_keyword; Func; [0]
func : q_keyword; Func; [0]
func : logic_ops; Func; [0]
reserved_keyword : ADD_BUILTIN | SUB_BUILTIN | MULT_BUILTIN | DIV_BUILTIN | POWER_BUILTIN | SQRT_BUILTIN | INPUT_BUILTIN | OUTPUT_BUILTIN; AThing; [0]
q_keyword : H_GATE | X_GATE | Z_GATE | Y_GATE | CNOT_GATE | SWAP_GATE | CZ_GATE | RX_GATE | RZ_GATE | RY_GATE | T_GATE | T-DAG_GATE | S_GATE | S-DAG_GATE | CR_GATE | TOFFOLI_GATE | INIT_GATE | SUPERPOSN_GATE | AMPLIFICATION_GATE | RESET_GATE | SYNC_GATE | AND_GATE | OR_GATE | PRINT_BUILTIN; AThing; [0]
inline_func : OPEN expr more_expr CLOSE; ManyExprs; [1, 2]
more_expr : expr more_expr; ManyExprs; [0, 1]
more_expr : ; ManyExprs; []
if_stmt : IF_COND OPEN tests CLOSE COLON OPEN body CLOSE elif_stmt else_stmt; IfStmt; [2, 6, 8, 9]
elif_stmt : ELIF_COND OPEN tests CLOSE COLON OPEN body CLOSE elif_stmt; ElifStmt; [2, 6, 8]
elif_stmt : ; ElifStmt; []
else_stmt : ELSE_COND COLON OPEN body CLOSE; ElseStmt; [3]
else_stmt : ; ElseStmt; []
tests : logic_ops_call OPEN expr more_expr CLOSE; Tests; [0, 2, 3]
logic_ops_call : logic_ops; Call; [0]
logic_ops : AND_LOGOP | OR_LOGOP | NOT_LOGOP | EQ_OP | GT_OP | GTE_OP | LT_OP | LTE_OP | NEQ_OP; AThing; [0]
for_loop : FOR_LOOP OPEN expr CLOSE OPEN entity more_entity CLOSE; ForLoop; [2, 5, 6]
result : RETURN OPEN expr more_expr CLOSE; ManyExprs; [2, 3, 0]
result : ; ManyExprs; []