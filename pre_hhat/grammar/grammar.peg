program = protocols? funcs* main? EOF
protocols = 'protocol' ':' (id / STR / ( '(' type ':' (id / STR) (',' type ':' (id / STR) )* ')' ))
builtin = 'add' / 'print' / '@x' / '@h' / '@cnot'
funcs = 'func' type_expr id (( '(' params? ')' )/ ':' ) '(' body* return? ')'
params =  type_expr id (type_expr id)*
main = 'main' '(' body* ')'
body = gen_call / var_decl / var_assign
var_decl = type_expr id ('=' (assign / expr) )?
type_expr = (type / id) '{' expr? '}'
type = 'int' / 'str' / 'hashmap' / 'circuit' / 'null'
var_assign = id assign
gen_call = collect? (builtin / id) (args/args2)
assign = ( '(' assign_expr (',' assign_expr)* ')' )
assign_expr = index_expr ':' value_expr
index_expr = expr?
value_expr = expr pipe*
pipe = ('|>' (var_assign / assign_expr / expr) )
expr = caller / INT / STR / HASHMAP / ( '(' expr+ ')' ) / id
caller = collect? ((builtin args?) / (id (args/args2)))
args = '(' expr* ')'
args2 = '(' id ':' expr (',' id ':' expr)* ')'
collect = 'collect'
return = 'return' ( ( '(' expr* ')' ) / expr)
id = r'(@)?[a-zA-Z][a-zA-Z_\-0-9]*'
INT = r'(\-)?[0-9]+'
STR = r'(\'(.+?)\'|\"(.+?)\")'
HASHMAP = '+(' hash_expr (',' hash_expr )* ')'
hash_expr = (id / INT / STR) ':' (id / INT / STR)
